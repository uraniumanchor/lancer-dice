{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","flat","setFlat","accuracy","setAccuracy","difficulty","setDifficulty","setFlatFromEvent","useCallback","e","target","value","setAccuracyFromEvent","setDifficultyFromEvent","probability","useMemo","d20Values","Array","from","keys","map","i","accMod","sign","accValueArrays","Math","abs","results","combinatorics","cartesianProduct","base","mods","length","max","v","filter","r","className","type","onChange","key","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAuFeA,MAnFf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGuBJ,mBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAIPC,EAAmBC,uBACvB,SAACC,GAAD,OAA4CP,GAASO,EAAEC,OAAOC,SAC9D,IAEIC,EAAuBJ,uBAC3B,SAACC,GAAD,OAA4CL,GAAaK,EAAEC,OAAOC,SAClE,IAEIE,EAAyBL,uBAC7B,SAACC,GAAD,OAA4CH,GAAeG,EAAEC,OAAOC,SACpE,IAEIG,EAAcC,mBAAQ,WAC1B,IAAMC,EAAYC,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,KAAI,SAACC,GAAD,OAAOA,EAAI,KACxDC,EAASnB,EAAWE,EACpBkB,EAAOpB,EAAWE,EAAa,GAAK,EACpCmB,EAAiBP,MAAMC,KAAKD,MAAMQ,KAAKC,IAAIJ,IAASH,QAAQC,KAAI,SAACC,GAAD,OACpEJ,MAAMC,KAAKD,MAAM,GAAGE,QAAQC,KAAI,SAACC,GAAD,OAAOA,EAAI,QAGvCM,EAAUC,IACbC,iBADa,MAAAD,IAAa,CACTZ,GADS,mBACKQ,KAC/BJ,KAAI,YAAsB,IAAD,iBAAnBU,EAAmB,KAAVC,EAAU,WACxB,OACED,EACA7B,GACC8B,EAAKC,OAASP,KAAKQ,IAAL,MAAAR,KAAI,YAASM,IAAqBR,EAAO,MAI9D,OAAOP,EAAUI,KACf,SAACc,GAAD,OACGP,EAAQQ,QAAO,SAACC,GAAD,OAAeA,GAAKF,KAAGF,OAASL,EAAQK,OAAU,SAErE,CAAC/B,EAAME,EAAUE,IACpB,OACE,yBAAKgC,UAAU,OACb,6BACE,4CAEE,2BAAOC,KAAK,SAASC,SAAUhC,EAAkBI,MAAOV,KAE1D,0CAEE,2BACEqC,KAAK,SACLC,SAAU3B,EACVD,MAAOR,KAGX,4CAEE,2BACEmC,KAAK,SACLC,SAAU1B,EACVF,MAAON,MAIb,+BACE,+BACE,4BACE,sCACA,6CAGJ,+BACGY,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,KAAI,SAACC,GAAD,OAChC,wBAAImB,IAAKnB,GACP,4BAAKA,EAAI,GACT,4BAAKP,EAAYO,GAAGoB,QAAQ,GAA5B,aClEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e1af185.chunk.js","sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport combinatorics from \"js-combinatorics\";\nimport \"./App.css\";\n\nfunction App() {\n  const [flat, setFlat] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [difficulty, setDifficulty] = useState(0);\n  const setFlatFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => setFlat(+e.target.value),\n    []\n  );\n  const setAccuracyFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => setAccuracy(+e.target.value),\n    []\n  );\n  const setDifficultyFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => setDifficulty(+e.target.value),\n    []\n  );\n  const probability = useMemo(() => {\n    const d20Values = Array.from(Array(20).keys()).map((i) => i + 1);\n    const accMod = accuracy - difficulty;\n    const sign = accuracy > difficulty ? 1 : -1;\n    const accValueArrays = Array.from(Array(Math.abs(accMod)).keys()).map((i) =>\n      Array.from(Array(6).keys()).map((i) => i + 1)\n    );\n\n    const results = combinatorics\n      .cartesianProduct(d20Values, ...accValueArrays)\n      .map(([base, ...mods]) => {\n        return (\n          base +\n          flat +\n          (mods.length ? Math.max(...(mods as number[])) * sign : 0)\n        );\n      });\n\n    return d20Values.map(\n      (v) =>\n        (results.filter((r: number) => r >= v).length / results.length) * 100.0\n    );\n  }, [flat, accuracy, difficulty]);\n  return (\n    <div className=\"App\">\n      <div>\n        <label>\n          Flat Bonus\n          <input type=\"number\" onChange={setFlatFromEvent} value={flat} />\n        </label>\n        <label>\n          Accuracy\n          <input\n            type=\"number\"\n            onChange={setAccuracyFromEvent}\n            value={accuracy}\n          />\n        </label>\n        <label>\n          Difficulty\n          <input\n            type=\"number\"\n            onChange={setDifficultyFromEvent}\n            value={difficulty}\n          />\n        </label>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Target</th>\n            <th>Probability</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from(Array(20).keys()).map((i) => (\n            <tr key={i}>\n              <td>{i + 1}</td>\n              <td>{probability[i].toFixed(1)}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}